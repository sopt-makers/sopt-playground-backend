plugins {
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'java'
	id 'org.graalvm.buildtools.native' version '0.10.4'
	id 'org.springframework.boot.aot' version '3.2.0' apply false
	id 'org.hibernate.orm' version '6.2.13.Final'
}

group = 'org.sopt.makers'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

def queryDslVersion = "5.0.0"
def mapstructVersion = "1.5.2.Final"

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.0")
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-actuator"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "org.springframework.boot:spring-boot-starter-mail"
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation "org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j"
	implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
	implementation 'com.squareup.okhttp3:okhttp:4.9.3'
	implementation 'com.google.code.gson:gson:2.10.1'
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0"
	implementation 'com.bucket4j:bucket4j-core:8.4.0'
	implementation 'net.minidev:json-smart'

	// Postgresql Array type
	implementation('io.hypersistence:hypersistence-utils-hibernate-62:3.5.0')

	// S3
	implementation('software.amazon.awssdk:s3:2.17.285')

	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	runtimeOnly "io.jsonwebtoken:jjwt-impl:0.11.2"
	runtimeOnly "io.jsonwebtoken:jjwt-jackson:0.11.2"
	implementation("com.nimbusds:nimbus-jose-jwt:9.37.3")

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"
	testCompileOnly "org.projectlombok:lombok"
	testAnnotationProcessor 'org.projectlombok:lombok'

	// Mapstruct
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	// QueryDsl
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"

	// Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Slack
	implementation 'com.slack.api:slack-api-client:1.41.0'

	// Prometheus
	implementation 'io.micrometer:micrometer-registry-prometheus'

	// Local Cache
	implementation "com.github.ben-manes.caffeine:caffeine:3.1.6"

	// Google Service
	implementation 'com.google.apis:google-api-services-sheets:v4-rev516-1.23.0'
	implementation 'com.google.auth:google-auth-library-oauth2-http:0.20.0'

	// Web Client
	implementation("org.springframework.boot:spring-boot-starter-webflux")

	// Mac M1/M2 ARM 환경에서 Netty DNS Resolver
	implementation "io.netty:netty-resolver-dns-native-macos:4.1.82.Final:osx-aarch_64"

	// BouncyCastle for Apple JWT
	implementation 'org.bouncycastle:bcprov-jdk18on:1.78.1'
	implementation 'org.bouncycastle:bcpkix-jdk18on:1.78.1'

	// ArchUnit for Native Image compatibility tests
	testImplementation 'com.tngtech.archunit:archunit-junit5:1.2.1'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

// Native Image 호환성 체크 태스크
tasks.register('checkNativeImageCompatibility') {
	group = 'verification'
	description = 'Native Image 호환성을 체크합니다'

	doLast {
		println "🔍 Native Image 호환성 체크 중..."

		def warnings = []

		// @QueryProjection 사용 체크
		fileTree('src/main/java').matching {
			include '**/*.java'
		}.each { file ->
			if (file.text.contains('@QueryProjection') && file.text.contains('record ')) {
				warnings.add("⚠️  ${file.name}: Record + @QueryProjection 사용 (Projections.constructor() 권장)")
			}

			// LAZY 없이 @OneToMany 체크
			if (file.text.contains('@OneToMany') && !file.text.contains('FetchType.EAGER') && !file.text.contains('fetch = FetchType')) {
				warnings.add("ℹ️  ${file.name}: @OneToMany에 fetch type 명시 권장")
			}
		}

		if (warnings.isEmpty()) {
			println "✅ Native Image 호환성 문제 없음!"
		} else {
			println "\n경고 사항:"
			warnings.each { println it }
		}
	}
}

// Native Image Hints 자동 생성 태스크 (Native Image 빌드 시에만 실행)
tasks.register('generateNativeImageHints') {
	group = 'native-image'
	description = 'Native Image 빌드를 위한 Hints 파일들을 자동 생성 (빌드 타임 전용)'

	// 생성 위치: build/generated-sources/nativeHints (Git에 커밋하지 않음)
	def outputDir = file("${buildDir}/generated-sources/nativeHints/org/sopt/makers/internal/graalVm/nativeImageHints")

	doLast {
		outputDir.mkdirs()

		println "🤖 Native Image Hints 자동 생성 중..."
		println "📁 출력 경로: ${outputDir}"

		// 1. QueryDSL Projection Hints 생성
		generateQueryDslProjectionHints(outputDir)

		// 2. Feign Hints 생성 (정적 템플릿)
		generateFeignHints(outputDir)

		println "\n✅ 모든 Hints 파일 생성 완료!"
		println "ℹ️  이 파일들은 Native Image 빌드 시에만 사용되며 Git에 커밋되지 않습니다."
	}
}

def generateQueryDslProjectionHints(File outputDir) {
	println "\n🔍 [1/2] QueryDSL Projection Hints 생성..."

	def complexDtos = []
	def packagePattern = ~/package\s+([\w.]+);/

	fileTree('src/main/java').matching {
		include '**/*.java'
	}.each { file ->
		def content = file.text

		// @Reflective + record 체크
		if (content.contains('@Reflective') && content.contains('record ')) {
			// QueryDSL Projection에 사용될 가능성이 있는 타입들:
			// 1. 제네릭 타입: List<...>, Set<...>, Map<...>
			// 2. 배열: String[], Long[] 등
			// 3. 엔티티/도메인 타입 (대문자로 시작하는 커스텀 클래스)
			def hasComplexType = content =~ /(?:List|Set|Map)<[^>]+>/ ||
								 content =~ /\b\w+\[\]\s+\w+[,)]/ ||
								 content =~ /record\s+\w+\([^)]*[A-Z]\w+\s+\w+/

			if (hasComplexType) {
				def matcher = content =~ packagePattern
				if (matcher.find()) {
					def packageName = matcher.group(1)
					def recordMatcher = content =~ /(?:public\s+)?record\s+(\w+)/
					if (recordMatcher.find()) {
						def className = recordMatcher.group(1)
						def fullClassName = "${packageName}.${className}"
						complexDtos.add(fullClassName)
						println "  ✓ 감지: ${className}"
					}
				}
			}
		}
	}

	def hintsContent = """package org.sopt.makers.internal.graalVm.nativeImageHints;

import org.springframework.aot.hint.MemberCategory;
import org.springframework.aot.hint.RuntimeHints;
import org.springframework.aot.hint.RuntimeHintsRegistrar;
import org.springframework.aot.hint.TypeReference;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.ImportRuntimeHints;

/**
 * QueryDSL Projections.constructor()를 위한 GraalVM Native Image 힌트
 *
 * ⚠️ 자동 생성 파일 - 수정하지 마세요!
 * 생성: Native Image 빌드 시 (./gradlew nativeCompile)
 *
 * 복잡한 타입(List<Enum>, 배열 등)을 가진 Record의 생성자를 등록합니다.
 */
@Configuration
@ImportRuntimeHints(QueryDslProjectionNativeHints.QueryDslProjectionRuntimeHints.class)
public class QueryDslProjectionNativeHints {

    static class QueryDslProjectionRuntimeHints implements RuntimeHintsRegistrar {

        @Override
        public void registerHints(RuntimeHints hints, ClassLoader classLoader) {
            registerComplexProjectionDtos(hints);
        }

        private void registerComplexProjectionDtos(RuntimeHints hints) {
            String[] complexDtoClasses = {
${complexDtos.collect { "                \"${it}\"" }.join(',\n')}
            };

            for (String className : complexDtoClasses) {
                hints.reflection().registerType(
                    TypeReference.of(className),
                    builder -> builder.withMembers(
                        MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS,
                        MemberCategory.INVOKE_DECLARED_CONSTRUCTORS,
                        MemberCategory.PUBLIC_FIELDS,
                        MemberCategory.DECLARED_FIELDS
                    )
                );
            }
        }
    }
}
"""

	def hintsFile = new File(outputDir, 'QueryDslProjectionNativeHints.java')
	hintsFile.text = hintsContent
	println "  ✅ QueryDslProjectionNativeHints.java (${complexDtos.size()}개 DTO)"
}

def generateFeignHints(File outputDir) {
	println "\n🔍 [2/2] Feign Hints 생성..."

	def hintsContent = """package org.sopt.makers.internal.graalVm.nativeImageHints;

import feign.Capability;
import feign.Client;
import feign.Contract;
import feign.ExceptionPropagationPolicy;
import feign.InvocationHandlerFactory;
import feign.Logger;
import feign.QueryMapEncoder;
import feign.Request;
import feign.RequestInterceptor;
import feign.ResponseInterceptor;
import feign.Retryer;
import feign.codec.Decoder;
import feign.codec.Encoder;
import feign.codec.ErrorDecoder;
import org.springframework.aot.hint.ExecutableMode;
import org.springframework.aot.hint.MemberCategory;
import org.springframework.aot.hint.RuntimeHints;
import org.springframework.aot.hint.RuntimeHintsRegistrar;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.ImportRuntimeHints;

/**
 * Feign Client를 위한 GraalVM Native Image 힌트
 *
 * ⚠️ 자동 생성 파일 - 수정하지 마세요!
 * 생성: Native Image 빌드 시 (./gradlew nativeCompile)
 *
 * Feign의 default interface methods를 Native Image에 등록합니다.
 */
@Configuration
@ImportRuntimeHints(FeignNativeHints.FeignRuntimeHints.class)
public class FeignNativeHints {

    static class FeignRuntimeHints implements RuntimeHintsRegistrar {

        @Override
        public void registerHints(RuntimeHints hints, ClassLoader classLoader) {
            registerFeignCoreClasses(hints);
            registerCapabilityMethods(hints);
            registerSpringCloudFeignClasses(hints);
        }

        private void registerFeignCoreClasses(RuntimeHints hints) {
            Class<?>[] coreClasses = {
                Capability.class, Client.class, Contract.class,
                Decoder.class, Encoder.class, ErrorDecoder.class,
                InvocationHandlerFactory.class, Logger.class,
                QueryMapEncoder.class, RequestInterceptor.class,
                ResponseInterceptor.class, ResponseInterceptor.Chain.class,
                Retryer.class, ExceptionPropagationPolicy.class,
                Request.Options.class
            };

            for (Class<?> clazz : coreClasses) {
                hints.reflection().registerType(clazz,
                    MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS,
                    MemberCategory.INVOKE_DECLARED_CONSTRUCTORS,
                    MemberCategory.INVOKE_PUBLIC_METHODS,
                    MemberCategory.INVOKE_DECLARED_METHODS,
                    MemberCategory.DECLARED_FIELDS,
                    MemberCategory.PUBLIC_FIELDS
                );
            }
        }

        private void registerCapabilityMethods(RuntimeHints hints) {
            try {
                hints.reflection().registerMethod(
                    Capability.class.getMethod("enrich", RequestInterceptor.class),
                    ExecutableMode.INVOKE
                );
                hints.reflection().registerMethod(
                    Capability.class.getMethod("enrich", ResponseInterceptor.Chain.class),
                    ExecutableMode.INVOKE
                );
                hints.reflection().registerMethod(
                    Capability.class.getMethod("enrich", Client.class),
                    ExecutableMode.INVOKE
                );
                hints.reflection().registerMethod(
                    Capability.class.getMethod("enrich", Decoder.class),
                    ExecutableMode.INVOKE
                );
                hints.reflection().registerMethod(
                    Capability.class.getMethod("enrich", Encoder.class),
                    ExecutableMode.INVOKE
                );
                hints.reflection().registerMethod(
                    Capability.class.getMethod("enrich", Contract.class),
                    ExecutableMode.INVOKE
                );
                hints.reflection().registerMethod(
                    Capability.class.getMethod("enrich", Logger.class),
                    ExecutableMode.INVOKE
                );
                hints.reflection().registerMethod(
                    Capability.class.getMethod("enrich", Logger.Level.class),
                    ExecutableMode.INVOKE
                );
                hints.reflection().registerMethod(
                    Capability.class.getMethod("enrich", InvocationHandlerFactory.class),
                    ExecutableMode.INVOKE
                );
                hints.reflection().registerMethod(
                    Capability.class.getMethod("enrich", QueryMapEncoder.class),
                    ExecutableMode.INVOKE
                );
                hints.reflection().registerMethod(
                    Capability.class.getMethod("enrich", ErrorDecoder.class),
                    ExecutableMode.INVOKE
                );
                hints.reflection().registerMethod(
                    Capability.class.getMethod("enrich", Request.Options.class),
                    ExecutableMode.INVOKE
                );
                hints.reflection().registerMethod(
                    Capability.class.getMethod("enrich", Retryer.class),
                    ExecutableMode.INVOKE
                );
                hints.reflection().registerMethod(
                    Capability.class.getMethod("enrich", ExceptionPropagationPolicy.class),
                    ExecutableMode.INVOKE
                );
            } catch (NoSuchMethodException ignored) {}
        }

        private void registerSpringCloudFeignClasses(RuntimeHints hints) {
            String[] springCloudClasses = {
                "org.springframework.cloud.openfeign.FeignClientFactoryBean",
                "org.springframework.cloud.openfeign.FeignContext",
                "org.springframework.cloud.openfeign.support.SpringMvcContract",
                "org.springframework.cloud.openfeign.support.SpringEncoder",
                "org.springframework.cloud.openfeign.support.SpringDecoder",
                "org.springframework.cloud.openfeign.support.ResponseEntityDecoder",
                "org.springframework.cloud.openfeign.FeignLoggerFactory",
                "org.springframework.cloud.openfeign.clientconfig.FeignClientConfigurer"
            };

            for (String className : springCloudClasses) {
                try {
                    Class<?> clazz = Class.forName(className);
                    hints.reflection().registerType(clazz,
                        MemberCategory.INVOKE_PUBLIC_CONSTRUCTORS,
                        MemberCategory.INVOKE_DECLARED_CONSTRUCTORS,
                        MemberCategory.INVOKE_PUBLIC_METHODS,
                        MemberCategory.INVOKE_DECLARED_METHODS
                    );
                } catch (ClassNotFoundException ignored) {}
            }
        }
    }
}
"""

	def hintsFile = new File(outputDir, 'FeignNativeHints.java')
	hintsFile.text = hintsContent
	println "  ✅ FeignNativeHints.java"
}

// 생성된 소스를 컴파일 경로에 추가 (먼저 선언)
sourceSets {
	main {
		java {
			srcDir "${buildDir}/generated-sources/nativeHints"
		}
	}
}

// Native Image 빌드 전에 자동으로 Hints 생성
// processAot보다 더 early stage인 compileJava에 연결
tasks.named('compileJava').configure {
	dependsOn 'generateNativeImageHints'
}

// Hibernate bytecode enhancement 설정 (Native Image 지원)
hibernate {
	enhancement {
		enableLazyInitialization = true
		enableDirtyTracking = true
		enableAssociationManagement = true
	}
}

// GraalVM 네이티브 컴파일을 위한 설정
graalvmNative {
	binaries {
		main {
			imageName = 'internal'
			mainClass = 'org.sopt.makers.internal.InternalApplication'
			buildArgs.add('--verbose')
            buildArgs.add('-H:+ReportExceptionStackTraces')
            buildArgs.add('--initialize-at-run-time=io.netty')
            buildArgs.add('-H:+AddAllCharsets')
            buildArgs.add('-H:+AllowDeprecatedBuilderClassesOnImageClasspath')
		}
	}
	metadataRepository {
		enabled = true
	}
}
