plugins {
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'java'
	id 'org.graalvm.buildtools.native' version '0.10.4'
	id 'org.springframework.boot.aot' version '3.2.0' apply false
	id 'org.hibernate.orm' version '6.2.13.Final'
}

group = 'org.sopt.makers'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

def queryDslVersion = "5.0.0"
def mapstructVersion = "1.5.2.Final"

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.0")
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-actuator"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "org.springframework.boot:spring-boot-starter-mail"
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation "org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j"
	implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
	implementation 'com.squareup.okhttp3:okhttp:4.9.3'
	implementation 'com.google.code.gson:gson:2.10.1'
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0"
	implementation 'com.bucket4j:bucket4j-core:8.4.0'
	implementation 'net.minidev:json-smart'

	// Postgresql Array type
	implementation('io.hypersistence:hypersistence-utils-hibernate-62:3.5.0')

	// S3
	implementation('software.amazon.awssdk:s3:2.17.285')

	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	runtimeOnly "io.jsonwebtoken:jjwt-impl:0.11.2"
	runtimeOnly "io.jsonwebtoken:jjwt-jackson:0.11.2"
	implementation("com.nimbusds:nimbus-jose-jwt:9.37.3")

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"
	testCompileOnly "org.projectlombok:lombok"
	testAnnotationProcessor 'org.projectlombok:lombok'

	// Mapstruct
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	// QueryDsl
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"

	// Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Slack
	implementation 'com.slack.api:slack-api-client:1.41.0'

	// Prometheus
	implementation 'io.micrometer:micrometer-registry-prometheus'

	// Local Cache
	implementation "com.github.ben-manes.caffeine:caffeine:3.1.6"

	// Google Service
	implementation 'com.google.apis:google-api-services-sheets:v4-rev516-1.23.0'
	implementation 'com.google.auth:google-auth-library-oauth2-http:0.20.0'

	// Web Client
	implementation("org.springframework.boot:spring-boot-starter-webflux")

	// Mac M1/M2 ARM 환경에서 Netty DNS Resolver
	implementation "io.netty:netty-resolver-dns-native-macos:4.1.82.Final:osx-aarch_64"

	// BouncyCastle for Apple JWT
	implementation 'org.bouncycastle:bcprov-jdk18on:1.78.1'
	implementation 'org.bouncycastle:bcpkix-jdk18on:1.78.1'

	// ArchUnit for Native Image compatibility tests
	testImplementation 'com.tngtech.archunit:archunit-junit5:1.2.1'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

// Native Image 호환성 체크 태스크
tasks.register('checkNativeImageCompatibility') {
	group = 'verification'
	description = 'Native Image 호환성을 체크합니다'

	doLast {
		println "🔍 Native Image 호환성 체크 중..."

		def warnings = []

		// @QueryProjection 사용 체크
		fileTree('src/main/java').matching {
			include '**/*.java'
		}.each { file ->
			if (file.text.contains('@QueryProjection') && file.text.contains('record ')) {
				warnings.add("⚠️  ${file.name}: Record + @QueryProjection 사용 (Projections.constructor() 권장)")
			}

			// LAZY 없이 @OneToMany 체크
			if (file.text.contains('@OneToMany') && !file.text.contains('FetchType.EAGER') && !file.text.contains('fetch = FetchType')) {
				warnings.add("ℹ️  ${file.name}: @OneToMany에 fetch type 명시 권장")
			}
		}

		if (warnings.isEmpty()) {
			println "✅ Native Image 호환성 문제 없음!"
		} else {
			println "\n경고 사항:"
			warnings.each { println it }
		}
	}
}

// Hibernate bytecode enhancement 설정 (Native Image 지원)
hibernate {
	enhancement {
		enableLazyInitialization = true
		enableDirtyTracking = true
		enableAssociationManagement = true
		enableExtendedEnhancement = false
	}
}

// GraalVM 네이티브 컴파일을 위한 설정
graalvmNative {
	binaries {
		main {
			imageName = 'internal'
			mainClass = 'org.sopt.makers.internal.InternalApplication'

			// 빌드 속도 최적화
			buildArgs.add('-J-Xmx4g')  // 빌더 자체 메모리 증가
			buildArgs.add('--no-fallback')  // fallback 이미지 생성 안 함
			buildArgs.add('-march=compatibility')  // 호환성 우선

			// 기존 설정
			buildArgs.add('--verbose')
            buildArgs.add('-H:+ReportExceptionStackTraces')
            buildArgs.add('--initialize-at-run-time=io.netty')
            buildArgs.add('-H:+AddAllCharsets')
            buildArgs.add('-H:+AllowDeprecatedBuilderClassesOnImageClasspath')
		}
	}
	metadataRepository {
		enabled = true
	}
}
